<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.demo.test.Test">
    
    <insert id="/data/api/indoor/weighted_score/invoke_scoring">
           insert into cmdi_pvopp.dwd_weighted_score_for_annual_plan_indoor_info
           (id, province, province_name, province_abbreviation, province_type, province_order, citys, citys_name,
            citys_abbreviation, citys_type, citys_order, citys_distribution, event_id, site_type, data_sampling_time, area_type,
            site_name, site_location, longitude, latitude, cover_area, cover_scene, secondary_cover_scene, other_cover_scene,
            related_room_location_4g, built_state_4g, base_station_id_4g, e_cgi_set_4g, built_way_4g,
            indoor_building_site_2g_900m_distri_sys_4g, indoor_building_site_cell_distri_sys_4g, indoor_distri_pico_cover_area_4g,
            indoor_integration_pico_cover_area_4g, indoor_trad_single_das_cover_area_4g, indoor_trad_double_das_cover_area_4g,
            indoor_fiber_distri_sys_cover_area_4g, indoor_freq_conver_distri_sys_cover_area_4g, indoor_ext_pico_cover_area_4g,
            indoor_inter_building_cover_area_4g, indoor_bs_num_4g, indoor_p_cell_num_4g, frequency_4g, freq_num_4g,
            indoor_building_site_ruu_num_4g, indoor_building_site_pruu_num_4g, indoor_building_site_ext_pico_remote_unit_num_4g,
            related_room_location_5g, distri_sta_5g, built_state_5g, base_station_id_5g, e_cgi_collection_5g, built_way_5g,
            indoor_distri_pico_cover_area_2t_5g, indoor_distri_pico_cover_area_4t_5g, indoor_integration_pico_cover_area_5g,
            indoor_trad_single_das_cover_area_5g, indoor_trad_double_das_cover_area_5g, indoor_fiber_distri_sys_cover_area_5g,
            indoor_freq_conver_distri_sys_cover_area_5g, indoor_ext_pico_cover_area_5g, indoor_inter_building_cover_area_5g,
            indoor_bs_num_5g, indoor_p_cell_num_5g, frequency_point_5g, freq_num_5g, indoor_building_site_rru_num_5g,
            indoor_building_site_pruu_num_5g, indoor_building_site_ext_pico_remote_unit_num_5g, rival, rival_common_site,
            rival_pre, spe_gua, spe_gua_type, vert_ind_dem, perday_flow_prediction_5g, built_state, indicator3_item3,
            indicator3_item7, scoring_type, score, scoring_threshold, market_guarantee_indicator_list,
            indicator_analysis_indicator_list, indicator1_name, indicator1_value, indicator1_grade_id, indicator1_algorithm_type,
            indicator1_grade_item_name, indicator1_grade_level, indicator1_grade_score, indicator1_weight,
            indicator1_weighted_score, indicator2_name, indicator2_value, indicator2_grade_id, indicator2_algorithm_type,
            indicator2_grade_item_name, indicator2_grade_level, indicator2_grade_score, indicator2_weight,
            indicator2_weighted_score, indicator3_name, indicator3_value, indicator3_grade_id, indicator3_algorithm_type,
            indicator3_grade_item_name, indicator3_grade_level, indicator3_grade_score, indicator3_weight,
            indicator3_weighted_score, indicator4_name, indicator4_value, indicator4_grade_id, indicator4_algorithm_type,
            indicator4_grade_item_name, indicator4_grade_level, indicator4_grade_score, indicator4_weight,
            indicator4_weighted_score, indicator5_name, indicator5_value, indicator5_grade_id, indicator5_algorithm_type,
            indicator5_grade_item_name, indicator5_grade_level, indicator5_grade_score, indicator5_weight,
            indicator5_weighted_score, indicator6_name, indicator6_value, indicator6_grade_id, indicator6_algorithm_type,
            indicator6_grade_item_name, indicator6_grade_level, indicator6_grade_score, indicator6_weight,
            indicator6_weighted_score, indicator7_name, indicator7_value, indicator7_grade_id, indicator7_algorithm_type,
            indicator7_grade_item_name, indicator7_grade_level, indicator7_grade_score, indicator7_weight,
            indicator7_weighted_score, indicator8_name, indicator8_value, indicator8_grade_id, indicator8_algorithm_type,
            indicator8_grade_item_name, indicator8_grade_level, indicator8_grade_score, indicator8_weight,
            indicator8_weighted_score, indicator9_name, indicator9_value, indicator9_grade_id, indicator9_algorithm_type,
            indicator9_grade_item_name, indicator9_grade_level, indicator9_grade_score, indicator9_weight,
            indicator9_weighted_score, indicator10_name, indicator10_value, indicator10_grade_id, indicator10_algorithm_type,
            indicator10_grade_item_name, indicator10_grade_level, indicator10_grade_score, indicator10_weight,
            indicator10_weighted_score, indicator11_name, indicator11_value, indicator11_grade_id, indicator11_algorithm_type,
            indicator11_grade_item_name, indicator11_grade_level, indicator11_grade_score, indicator11_weight,
            indicator11_weighted_score, indicator12_name, indicator12_value, indicator12_grade_id, indicator12_algorithm_type,
            indicator12_grade_item_name, indicator12_grade_level, indicator12_grade_score, indicator12_weight,
            indicator12_weighted_score, is_high_value_by_score, is_high_value_by_manual_work, is_high_value, manual_work_reason,
            dwd_site_for_annual_plan_indoor_info_id, dwd_site_for_annual_plan_indoor_info_event_id, create_time, last_update_time)
           select upper(replaceAll(CAST(generateUUIDv4(), 'String'), '-', '')) as id,
                  any(b1.province) as province,
                  any(b1.province_name) as province_name,
                  any(b1.province_abbreviation) as province_abbreviation,
                  any(b1.province_type) as province_type,
                  any(b1.province_order) as province_order,
                  any(b1.citys) as citys,
                  any(b1.citys_name) as citys_name,
                  any(b1.citys_abbreviation) as citys_abbreviation,
                  any(b1.citys_type) as citys_type,
                  any(b1.citys_order) as citys_order,
                  any(b1.citys_distribution) as citys_distribution,
                  #{params.eventId} as event_id,
                  any(b1.site_type) as site_type,
                  any(b1.data_sampling_time) as data_sampling_time,
                  any(b1.area_type) as area_type,
                  any(b1.site_name) as site_name,
                  any(b1.site_location) as site_location,
                  any(b1.longitude) as longitude,
                  any(b1.latitude) as latitude,
                  any(b1.cover_area) as cover_area,
                  any(b1.cover_scene) as cover_scene,
                  any(b1.secondary_cover_scene) as secondary_cover_scene,
                  any(b1.other_cover_scene) as other_cover_scene,
                  any(b1.related_room_location_4g) as related_room_location_4g,
                  any(b1.built_state_4g) as built_state_4g,
                  any(b1.base_station_id_4g) as base_station_id_4g,
                  any(b1.e_cgi_set_4g) as e_cgi_set_4g,
                  any(b1.built_way_4g) as built_way_4g,
                  any(b1.indoor_building_site_2g_900m_distri_sys_4g) as indoor_building_site_2g_900m_distri_sys_4g,
                  any(b1.indoor_building_site_cell_distri_sys_4g) as indoor_building_site_cell_distri_sys_4g,
                  any(b1.indoor_distri_pico_cover_area_4g) as indoor_distri_pico_cover_area_4g,
                  any(b1.indoor_integration_pico_cover_area_4g) as indoor_integration_pico_cover_area_4g,
                  any(b1.indoor_trad_single_das_cover_area_4g) as indoor_trad_single_das_cover_area_4g,
                  any(b1.indoor_trad_double_das_cover_area_4g) as indoor_trad_double_das_cover_area_4g,
                  any(b1.indoor_fiber_distri_sys_cover_area_4g) as indoor_fiber_distri_sys_cover_area_4g,
                  any(b1.indoor_freq_conver_distri_sys_cover_area_4g) as indoor_freq_conver_distri_sys_cover_area_4g,
                  any(b1.indoor_ext_pico_cover_area_4g) as indoor_ext_pico_cover_area_4g,
                  any(b1.indoor_inter_building_cover_area_4g) as indoor_inter_building_cover_area_4g,
                  any(b1.indoor_bs_num_4g) as indoor_bs_num_4g,
                  any(b1.indoor_p_cell_num_4g) as indoor_p_cell_num_4g,
                  any(b1.frequency_4g) as frequency_4g,
                  any(b1.freq_num_4g) as freq_num_4g,
                  any(b1.indoor_building_site_ruu_num_4g) as indoor_building_site_ruu_num_4g,
                  any(b1.indoor_building_site_pruu_num_4g) as indoor_building_site_pruu_num_4g,
                  any(b1.indoor_building_site_ext_pico_remote_unit_num_4g) as indoor_building_site_ext_pico_remote_unit_num_4g,
                  any(b1.related_room_location_5g) as related_room_location_5g,
                  any(b1.distri_sta_5g) as distri_sta_5g,
                  any(b1.built_state_5g) as built_state_5g,
                  any(b1.base_station_id_5g) as base_station_id_5g,
                  any(b1.e_cgi_collection_5g) as e_cgi_collection_5g,
                  any(b1.built_way_5g) as built_way_5g,
                  any(b1.indoor_distri_pico_cover_area_2t_5g) as indoor_distri_pico_cover_area_2t_5g,
                  any(b1.indoor_distri_pico_cover_area_4t_5g) as indoor_distri_pico_cover_area_4t_5g,
                  any(b1.indoor_integration_pico_cover_area_5g) as indoor_integration_pico_cover_area_5g,
                  any(b1.indoor_trad_single_das_cover_area_5g) as indoor_trad_single_das_cover_area_5g,
                  any(b1.indoor_trad_double_das_cover_area_5g) as indoor_trad_double_das_cover_area_5g,
                  any(b1.indoor_fiber_distri_sys_cover_area_5g) as indoor_fiber_distri_sys_cover_area_5g,
                  any(b1.indoor_freq_conver_distri_sys_cover_area_5g) as indoor_freq_conver_distri_sys_cover_area_5g,
                  any(b1.indoor_ext_pico_cover_area_5g) as indoor_ext_pico_cover_area_5g,
                  any(b1.indoor_inter_building_cover_area_5g) as indoor_inter_building_cover_area_5g,
                  any(b1.indoor_bs_num_5g) as indoor_bs_num_5g,
                  any(b1.indoor_p_cell_num_5g) as indoor_p_cell_num_5g,
                  any(b1.frequency_point_5g) as frequency_point_5g,
                  any(b1.freq_num_5g) as freq_num_5g,
                  any(b1.indoor_building_site_rru_num_5g) as indoor_building_site_rru_num_5g,
                  any(b1.indoor_building_site_pruu_num_5g) as indoor_building_site_pruu_num_5g,
                  any(b1.indoor_building_site_ext_pico_remote_unit_num_5g) as indoor_building_site_ext_pico_remote_unit_num_5g,
                  any(b1.rival) as rival,
                  any(b1.rival_common_site) as rival_common_site,
                  any(b1.rival_pre) as rival_pre,
                  any(b1.spe_gua) as spe_gua,
                  any(b1.spe_gua_type) as spe_gua_type,
                  any(b1.vert_ind_dem) as vert_ind_dem,
                  any(b1.perday_flow_prediction_5g) as perday_flow_prediction_5g,
                  any(b1.built_state) as built_state,
                  any(b1.indicator3_item3) as indicator3_item3,
                  any(b1.indicator3_item7) as indicator3_item7,
                  multiIf(has(groupArray(b1.is_indicator_one_vote),1),'1', has(groupArray(b1.is_indicator_weighted), 1),'2','') as scoring_type, --打分类型:1-一票通过 2-专家权重打分 3-熵权权重打分
                  multiIf(and(scoring_type == '1', has(groupArray(b1.indicator_one_vote_boolean), 1)),toDecimal64(100, 5), scoring_type == '2', toDecimal64(sum(if(b1.is_indicator_weighted, b1.indicator_weighted_score * b1.indicator_score, null)), 5),0) as score,
                  toDecimal64(0, 5) as scoring_threshold,
                  ['scene_value', 'policy_guarantee', 'network_complaints', 'rival_pre'] as market_guarantee_indicator_list, --市场保障- 场景价值、政策保障、网络投诉、竞对压力
                  ['5g_to_4g','5g_terminal_penetration','flow_density'] as indicator_analysis_indicator_list, --指标分析- 5G倒流4G、5G终端渗透率、流量密度
                  max(if(b1.indicator_name = '5g_to_4g', b1.indicator_name, '')) as indicator1_name,
                  max(if(b1.indicator_name = '5g_to_4g', b1.indicator_value, '')) as indicator1_value,
                  max(if(b1.indicator_name = '5g_to_4g', b1.aid, '')) as indicator1_grade_id,
                  max(if(b1.indicator_name = '5g_to_4g', b1.indicator_algorithm_type, '')) as indicator1_algorithm_type,
                  max(if(b1.indicator_name = '5g_to_4g', b1.indicator_item_name, '')) as indicator1_grade_item_name,
                  max(if(b1.indicator_name = '5g_to_4g', b1.indicator_level, 0)) as indicator1_grade_level,
                  max(if(b1.indicator_name = '5g_to_4g', b1.indicator_score, toDecimal64(0, 5))) as indicator1_grade_score,
                  max(if(b1.indicator_name = '5g_to_4g', b1.indicator_weighted_score, toDecimal64(0, 5))) as indicator1_weight,
                  max(if(b1.indicator_name = '5g_to_4g', toDecimal64(b1.indicator_weighted_score * b1.indicator_score, 5), toDecimal64(0, 5))) as indicator1_weighted_score,
                  max(if(b1.indicator_name = 'wireless_utilization', b1.indicator_name, '')) as indicator2_name,
                  max(if(b1.indicator_name = 'wireless_utilization', b1.indicator_value, '')) as indicator2_value,
                  max(if(b1.indicator_name = 'wireless_utilization', b1.aid, '')) as indicator2_grade_id,
                  max(if(b1.indicator_name = 'wireless_utilization', b1.indicator_algorithm_type, '')) as indicator2_algorithm_type,
                  max(if(b1.indicator_name = 'wireless_utilization', b1.indicator_item_name, '')) as indicator2_grade_item_name,
                  max(if(b1.indicator_name = 'wireless_utilization', b1.indicator_level, 0)) as indicator2_grade_level,
                  max(if(b1.indicator_name = 'wireless_utilization', b1.indicator_score, toDecimal64(0, 5))) as indicator2_grade_score,
                  max(if(b1.indicator_name = 'wireless_utilization', b1.indicator_weighted_score, toDecimal64(0, 5))) as indicator2_weight,
                  max(if(b1.indicator_name = 'wireless_utilization', toDecimal64(b1.indicator_weighted_score * b1.indicator_score, 5), toDecimal64(0, 5))) as indicator2_weighted_score,
                  max(if(b1.indicator_name = 'flow_density', b1.indicator_name, '')) as indicator3_name,
                  max(if(b1.indicator_name = 'flow_density', b1.indicator_value, '')) as indicator3_value,
                  max(if(b1.indicator_name = 'flow_density', b1.aid, '')) as indicator3_grade_id,
                  max(if(b1.indicator_name = 'flow_density', b1.indicator_algorithm_type, '')) as indicator3_algorithm_type,
                  max(if(b1.indicator_name = 'flow_density', b1.indicator_item_name, '')) as indicator3_grade_item_name,
                  max(if(b1.indicator_name = 'flow_density', b1.indicator_level, 0)) as indicator3_grade_level,
                  max(if(b1.indicator_name = 'flow_density', b1.indicator_score, toDecimal64(0, 5))) as indicator3_grade_score,
                  max(if(b1.indicator_name = 'flow_density', b1.indicator_weighted_score, toDecimal64(0, 5))) as indicator3_weight,
                  max(if(b1.indicator_name = 'flow_density', toDecimal64(b1.indicator_weighted_score * b1.indicator_score, 5), toDecimal64(0, 5))) as indicator3_weighted_score,
                  max(if(b1.indicator_name = 'scene_value', b1.indicator_name, '')) as indicator4_name,
                  max(if(b1.indicator_name = 'scene_value', b1.indicator_value, '')) as indicator4_value,
                  max(if(b1.indicator_name = 'scene_value', b1.aid, '')) as indicator4_grade_id,
                  max(if(b1.indicator_name = 'scene_value', b1.indicator_algorithm_type, '')) as indicator4_algorithm_type,
                  max(if(b1.indicator_name = 'scene_value', b1.indicator_item_name, '')) as indicator4_grade_item_name,
                  max(if(b1.indicator_name = 'scene_value', b1.indicator_level, 0)) as indicator4_grade_level,
                  max(if(b1.indicator_name = 'scene_value', b1.indicator_score, toDecimal64(0, 5))) as indicator4_grade_score,
                  max(if(b1.indicator_name = 'scene_value', b1.indicator_weighted_score, toDecimal64(0, 5))) as indicator4_weight,
                  max(if(b1.indicator_name = 'scene_value', toDecimal64(b1.indicator_weighted_score * b1.indicator_score, 5), toDecimal64(0, 5))) as indicator4_weighted_score,
                  max(if(b1.indicator_name = 'rrc_link', b1.indicator_name, '')) as indicator5_name,
                  max(if(b1.indicator_name = 'rrc_link', b1.indicator_value, '')) as indicator5_value,
                  max(if(b1.indicator_name = 'rrc_link', b1.aid, '')) as indicator5_grade_id,
                  max(if(b1.indicator_name = 'rrc_link', b1.indicator_algorithm_type, '')) as indicator5_algorithm_type,
                  max(if(b1.indicator_name = 'rrc_link', b1.indicator_item_name, '')) as indicator5_grade_item_name,
                  max(if(b1.indicator_name = 'rrc_link', b1.indicator_level, 0)) as indicator5_grade_level,
                  max(if(b1.indicator_name = 'rrc_link', b1.indicator_score, toDecimal64(0, 5))) as indicator5_grade_score,
                  max(if(b1.indicator_name = 'rrc_link', b1.indicator_weighted_score, toDecimal64(0, 5))) as indicator5_weight,
                  max(if(b1.indicator_name = 'rrc_link', toDecimal64(b1.indicator_weighted_score * b1.indicator_score, 5), toDecimal64(0, 5))) as indicator5_weighted_score,
                  max(if(b1.indicator_name = '5g_terminal_penetration', b1.indicator_name, '')) as indicator6_name,
                  max(if(b1.indicator_name = '5g_terminal_penetration', b1.indicator_value, '')) as indicator6_value,
                  max(if(b1.indicator_name = '5g_terminal_penetration', b1.aid, '')) as indicator6_grade_id,
                  max(if(b1.indicator_name = '5g_terminal_penetration', b1.indicator_algorithm_type, '')) as indicator6_algorithm_type,
                  max(if(b1.indicator_name = '5g_terminal_penetration', b1.indicator_item_name, '')) as indicator6_grade_item_name,
                  max(if(b1.indicator_name = '5g_terminal_penetration', b1.indicator_level, 0)) as indicator6_grade_level,
                  max(if(b1.indicator_name = '5g_terminal_penetration', b1.indicator_score, toDecimal64(0, 5))) as indicator6_grade_score,
                  max(if(b1.indicator_name = '5g_terminal_penetration', b1.indicator_weighted_score, toDecimal64(0, 5))) as indicator6_weight,
                  max(if(b1.indicator_name = '5g_terminal_penetration', toDecimal64(b1.indicator_weighted_score * b1.indicator_score, 5), toDecimal64(0, 5))) as indicator6_weighted_score,
                  max(if(b1.indicator_name = 'rival_pre', b1.indicator_name, '')) as indicator7_name,
                  max(if(b1.indicator_name = 'rival_pre', b1.indicator_value, '')) as indicator7_value,
                  max(if(b1.indicator_name = 'rival_pre', b1.aid, '')) as indicator7_grade_id,
                  max(if(b1.indicator_name = 'rival_pre', b1.indicator_algorithm_type, '')) as indicator7_algorithm_type,
                  max(if(b1.indicator_name = 'rival_pre', b1.indicator_item_name, '')) as indicator7_grade_item_name,
                  max(if(b1.indicator_name = 'rival_pre', b1.indicator_level, 0)) as indicator7_grade_level,
                  max(if(b1.indicator_name = 'rival_pre', b1.indicator_score, toDecimal64(0, 5))) as indicator7_grade_score,
                  max(if(b1.indicator_name = 'rival_pre', b1.indicator_weighted_score, toDecimal64(0, 5))) as indicator7_weight,
                  max(if(b1.indicator_name = 'rival_pre', toDecimal64(b1.indicator_weighted_score * b1.indicator_score, 5), toDecimal64(0, 5))) as indicator7_weighted_score,
                  max(if(b1.indicator_name = 'flow_cost', b1.indicator_name, '')) as indicator8_name,
                  max(if(b1.indicator_name = 'flow_cost', b1.indicator_value, '')) as indicator8_value,
                  max(if(b1.indicator_name = 'flow_cost', b1.aid, '')) as indicator8_grade_id,
                  max(if(b1.indicator_name = 'flow_cost', b1.indicator_algorithm_type, '')) as indicator8_algorithm_type,
                  max(if(b1.indicator_name = 'flow_cost', b1.indicator_item_name, '')) as indicator8_grade_item_name,
                  max(if(b1.indicator_name = 'flow_cost', b1.indicator_level, 0)) as indicator8_grade_level,
                  max(if(b1.indicator_name = 'flow_cost', b1.indicator_score, toDecimal64(0, 5))) as indicator8_grade_score,
                  max(if(b1.indicator_name = 'flow_cost', b1.indicator_weighted_score, toDecimal64(0, 5))) as indicator8_weight,
                  max(if(b1.indicator_name = 'flow_cost', toDecimal64(b1.indicator_weighted_score * b1.indicator_score, 5), toDecimal64(0, 5))) as indicator8_weighted_score,
                  max(if(b1.indicator_name = 'site_cost', b1.indicator_name, '')) as indicator9_name,
                  max(if(b1.indicator_name = 'site_cost', b1.indicator_value, '')) as indicator9_value,
                  max(if(b1.indicator_name = 'site_cost', b1.aid, '')) as indicator9_grade_id,
                  max(if(b1.indicator_name = 'site_cost', b1.indicator_algorithm_type, '')) as indicator9_algorithm_type,
                  max(if(b1.indicator_name = 'site_cost', b1.indicator_item_name, '')) as indicator9_grade_item_name,
                  max(if(b1.indicator_name = 'site_cost', b1.indicator_level,0)) as indicator9_grade_level,
                  max(if(b1.indicator_name = 'site_cost', b1.indicator_score, toDecimal64(0, 5))) as indicator9_grade_score,
                  max(if(b1.indicator_name = 'site_cost', b1.indicator_weighted_score, toDecimal64(0, 5))) as indicator9_weight,
                  max(if(b1.indicator_name = 'site_cost', toDecimal64(b1.indicator_weighted_score * b1.indicator_score, 5), toDecimal64(0, 5))) as indicator9_weighted_score,
                  max(if(b1.indicator_name = 'deep_coverage', b1.indicator_name, '')) as indicator10_name,
                  max(if(b1.indicator_name = 'deep_coverage', b1.indicator_value, '')) as indicator10_value,
                  max(if(b1.indicator_name = 'deep_coverage', b1.aid, '')) as indicator10_grade_id,
                  max(if(b1.indicator_name = 'deep_coverage', b1.indicator_algorithm_type, '')) as indicator10_algorithm_type,
                  max(if(b1.indicator_name = 'deep_coverage', b1.indicator_item_name, '')) as indicator10_grade_item_name,
                  max(if(b1.indicator_name = 'deep_coverage', b1.indicator_level, 0)) as indicator10_grade_level,
                  max(if(b1.indicator_name = 'deep_coverage', b1.indicator_score, toDecimal64(0, 5))) as indicator10_grade_score,
                  max(if(b1.indicator_name = 'deep_coverage', b1.indicator_weighted_score, toDecimal64(0, 5))) as indicator10_weight,
                  max(if(b1.indicator_name = 'deep_coverage', toDecimal64(b1.indicator_weighted_score * b1.indicator_score, 5), toDecimal64(0, 5))) as indicator10_weighted_score,
                  max(if(b1.indicator_name = 'network_complaints', b1.indicator_name, '')) as indicator11_name,
                  max(if(b1.indicator_name = 'network_complaints', b1.indicator_value, '')) as indicator11_value,
                  max(if(b1.indicator_name = 'network_complaints', b1.aid, '')) as indicator11_grade_id,
                  max(if(b1.indicator_name = 'network_complaints', b1.indicator_algorithm_type, '')) as indicator11_algorithm_type,
                  max(if(b1.indicator_name = 'network_complaints', b1.indicator_item_name, '')) as indicator11_grade_item_name,
                  max(if(b1.indicator_name = 'network_complaints', b1.indicator_level, 0)) as indicator11_grade_level,
                  max(if(b1.indicator_name = 'network_complaints', b1.indicator_score, toDecimal64(0, 5))) as indicator11_grade_score,
                  max(if(b1.indicator_name = 'network_complaints', b1.indicator_weighted_score, toDecimal64(0, 5))) as indicator11_weight,
                  max(if(b1.indicator_name = 'network_complaints', toDecimal64(b1.indicator_weighted_score * b1.indicator_score, 5), toDecimal64(0, 5))) as indicator11_weighted_score,
                  max(if(b1.indicator_name = 'policy_guarantee', b1.indicator_name, '')) as indicator12_name,
                  max(if(b1.indicator_name = 'policy_guarantee', b1.indicator_value, '')) as indicator12_value,
                  max(if(b1.indicator_name = 'policy_guarantee', b1.aid, '')) as indicator12_grade_id,
                  max(if(b1.indicator_name = 'policy_guarantee', b1.indicator_algorithm_type, '')) as indicator12_algorithm_type,
                  max(if(b1.indicator_name = 'policy_guarantee', b1.indicator_item_name, '')) as indicator12_grade_item_name,
                  max(if(b1.indicator_name = 'policy_guarantee', b1.indicator_level, 0)) as indicator12_grade_level,
                  max(if(b1.indicator_name = 'policy_guarantee', b1.indicator_score, toDecimal64(0, 5))) as indicator12_grade_score,
                  max(if(b1.indicator_name = 'policy_guarantee', b1.indicator_weighted_score, toDecimal64(0, 5))) as indicator12_weight,
                  max(if(b1.indicator_name = 'policy_guarantee', toDecimal64(b1.indicator_weighted_score * b1.indicator_score, 5), toDecimal64(0, 5))) as indicator12_weighted_score,
                  '' as is_high_value_by_score,
                  '' as is_high_value_by_manual_work,
                  '' as is_high_value,
                  '' as manual_work_reason,
                  b1.dwd_site_for_annual_plan_indoor_info_id,
                  any(b1.dwd_site_for_annual_plan_indoor_info_event_id) as dwd_site_for_annual_plan_indoor_info_event_id,
                  now() as create_time,
                  now() as last_update_time
           from (
        select a1.id as aid,
        a1.province,
        a1.province_name,
        a1.province_abbreviation,
        a1.province_type,
        a1.province_order,
        a1.citys,
        a1.citys_name,
        a1.citys_abbreviation,
        a1.citys_type,
        a1.citys_order,
        a1.citys_distribution,
        a1.event_id,
        a1.site_type,
        a1.data_sampling_time,
        a1.area_type,
        a1.site_name,
        a1.site_location,
        a1.longitude,
        a1.latitude,
        a1.cover_area,
        a1.cover_scene,
        a1.secondary_cover_scene,
        a1.other_cover_scene,
        a1.related_room_location_4g,
        a1.built_state_4g,
        a1.base_station_id_4g,
        a1.e_cgi_set_4g,
        a1.built_way_4g,
        a1.indoor_building_site_2g_900m_distri_sys_4g,
        a1.indoor_building_site_cell_distri_sys_4g,
        a1.indoor_distri_pico_cover_area_4g,
        a1.indoor_integration_pico_cover_area_4g,
        a1.indoor_trad_single_das_cover_area_4g,
        a1.indoor_trad_double_das_cover_area_4g,
        a1.indoor_fiber_distri_sys_cover_area_4g,
        a1.indoor_freq_conver_distri_sys_cover_area_4g,
        a1.indoor_ext_pico_cover_area_4g,
        a1.indoor_inter_building_cover_area_4g,
        a1.indoor_bs_num_4g,
        a1.indoor_p_cell_num_4g,
        a1.frequency_4g,
        a1.freq_num_4g,
        a1.indoor_building_site_ruu_num_4g,
        a1.indoor_building_site_pruu_num_4g,
        a1.indoor_building_site_ext_pico_remote_unit_num_4g,
        a1.related_room_location_5g,
        a1.distri_sta_5g,
        a1.built_state_5g,
        a1.base_station_id_5g,
        a1.e_cgi_collection_5g,
        a1.built_way_5g,
        a1.indoor_distri_pico_cover_area_2t_5g,
        a1.indoor_distri_pico_cover_area_4t_5g,
        a1.indoor_integration_pico_cover_area_5g,
        a1.indoor_trad_single_das_cover_area_5g,
        a1.indoor_trad_double_das_cover_area_5g,
        a1.indoor_fiber_distri_sys_cover_area_5g,
        a1.indoor_freq_conver_distri_sys_cover_area_5g,
        a1.indoor_ext_pico_cover_area_5g,
        a1.indoor_inter_building_cover_area_5g,
        a1.indoor_bs_num_5g,
        a1.indoor_p_cell_num_5g,
        a1.frequency_point_5g,
        a1.freq_num_5g,
        a1.indoor_building_site_rru_num_5g,
        a1.indoor_building_site_pruu_num_5g,
        a1.indoor_building_site_ext_pico_remote_unit_num_5g,
        a1.rival,
        a1.rival_common_site,
        a1.rival_pre,
        a1.spe_gua,
        a1.spe_gua_type,
        a1.vert_ind_dem,
        a1.perday_flow_prediction_5g,
        a1.built_state,
        a1.indicator3_item3,
        a1.indicator3_item7,
        a1.indicator_name,
        a1.indicator_value,
        a1.indicator_algorithm_type,
        a1.indicator_item_name,
        a1.indicator_level,
        a1.indicator_score,
        a1.dwd_site_for_annual_plan_indoor_info_id,
        a1.dwd_site_for_annual_plan_indoor_info_event_id,
        indexOf(cast(
        <choose>
            <when test="params.raw.builtStateNewStock ==null ">
                []
            </when>
            <when test="params.raw.builtStateNewStock != null and params.raw.builtStateNewStock.weightPool != null and params.raw.builtStateNewStock.weightPool.size() > 0">
                <foreach collection="params.raw.builtStateNewStock.weightPool"
                         item="item" separator="," open="[" close="]">
                    #{item.indicatorName}
                </foreach>
            </when>
            <otherwise>
                []
            </otherwise>
        </choose>
        as Array(String)), a1.indicator_name) as new_stock_weight_name_index,
        cast(
        <choose>
            <when test="params.raw.builtStateNewStock ==null ">
                []
            </when>
            <when test="params.raw.builtStateNewStock != null and params.raw.builtStateNewStock.weightPool != null and params.raw.builtStateNewStock.weightPool.size() > 0">
                <foreach collection="params.raw.builtStateNewStock.weightPool"
                         item="item" separator="," open="[" close="]">
                    #{item.indicatorWeightRatio}
                </foreach>
            </when>
            <otherwise>
                []
            </otherwise>
        </choose>
        as Array(Decimal64(5))) as new_stock_weight_weight_array,
        indexOf(cast(
        <choose>
            <when test="params.raw.builtStateNewNew ==null ">
                []
            </when>
            <when test="params.raw.builtStateNewNew != null and params.raw.builtStateNewNew.weightPool != null and params.raw.builtStateNewNew.weightPool.size() > 0">
                <foreach collection="params.raw.builtStateNewNew.weightPool"
                         item="item" separator="," open="[" close="]">
                    #{item.indicatorName}
                </foreach>
            </when>
            <otherwise>
                []
            </otherwise>
        </choose>
        as Array(String)), a1.indicator_name) as new_new_weight_name_index,
        cast(
        <choose>
            <when test="params.raw.builtStateNewNew ==null ">
                []
            </when>
            <when test="params.raw.builtStateNewNew != null and params.raw.builtStateNewNew.weightPool != null and params.raw.builtStateNewNew.weightPool.size() > 0">
                <foreach collection="params.raw.builtStateNewNew.weightPool"
                         item="item" separator="," open="[" close="]">
                    #{item.indicatorWeightRatio}
                </foreach>
            </when>
            <otherwise>
                []
            </otherwise>
        </choose>
        as Array(Decimal64(5))) as new_new_weight_weight_array,
        indexOf(cast(
        <choose>
            <when test="params.raw.builtStateNewStock ==null ">
                []
            </when>
            <when test="params.raw.builtStateNewStock != null and params.raw.builtStateNewStock.oneVoteThroughPool != null and params.raw.builtStateNewStock.oneVoteThroughPool.size() > 0">
                <foreach collection="params.raw.builtStateNewStock.oneVoteThroughPool"
                         item="item" separator="," open="[" close="]">
                    #{item.indicatorName}
                </foreach>
            </when>
            <otherwise>
                []
            </otherwise>
        </choose>
        as Array(String)), a1.indicator_name) as new_stock_one_name_index,
        cast(
        <choose>
            <when test="params.raw.builtStateNewStock ==null ">
                [[]]
            </when>
            <when test="params.raw.builtStateNewStock != null and params.raw.builtStateNewStock.oneVoteThroughPool != null and params.raw.builtStateNewStock.oneVoteThroughPool.size() > 0">
                <foreach collection="params.raw.builtStateNewStock.oneVoteThroughPool"
                         item="item" separator="," open="[" close="]">
                    <foreach collection="item.indicatorLevel" item="item" separator="," open="[" close="]">
                        #{item}
                    </foreach>
                </foreach>
            </when>
            <otherwise>
                [[]]
            </otherwise>
        </choose>
        as Array(Array(Int32)))                     as new_stock_one_level_array,
        indexOf(cast(
        <choose>
            <when test="params.raw.builtStateNewNew ==null ">
                []
            </when>
            <when test="params.raw.builtStateNewNew != null and params.raw.builtStateNewNew.oneVoteThroughPool != null and params.raw.builtStateNewNew.oneVoteThroughPool.size() > 0">
                <foreach collection="params.raw.builtStateNewNew.oneVoteThroughPool"
                         item="item" separator="," open="[" close="]">
                    #{item.indicatorName}
                </foreach>
            </when>
            <otherwise>
                []
            </otherwise>
        </choose>
        as Array(String)), a1.indicator_name) as new_new_one_name_index,
        cast(
        <choose>
            <when test="params.raw.builtStateNewNew ==null ">
                [[]]
            </when>
            <when test="params.raw.builtStateNewNew != null and params.raw.builtStateNewNew.oneVoteThroughPool != null and params.raw.builtStateNewNew.oneVoteThroughPool.size() > 0">
                <foreach collection="params.raw.builtStateNewNew.oneVoteThroughPool"
                         item="item" separator="," open="[" close="]">
                    <foreach collection="item.indicatorLevel" item="item" separator="," open="[" close="]">
                        #{item}
                    </foreach>
                </foreach>
            </when>
            <otherwise>
                [[]]
            </otherwise>
        </choose>
        as Array(Array(Int32)))                     as new_new_one_level_array,
        has(multiIf(and(a1.built_state = '10',  new_stock_one_name_index), arrayElement(new_stock_one_level_array, new_stock_one_name_index),
        and(a1.built_state = '11',  new_new_one_name_index), arrayElement(new_new_one_level_array, new_new_one_name_index), emptyArrayInt32()), a1.indicator_level) as indicator_one_vote_boolean,

        toDecimal64(multiIf(and(a1.built_state = '10',new_stock_weight_name_index), arrayElement(new_stock_weight_weight_array, new_stock_weight_name_index),
        and(a1.built_state = '11',new_new_weight_name_index), arrayElement(new_new_weight_weight_array, new_new_weight_name_index), toDecimal64(0, 5)), 5) as indicator_weighted_score,
        multiIf(
        and(a1.built_state = '10',new_stock_weight_name_index), 1,
        and(a1.built_state = '11',new_new_weight_name_index), 1, 0) as is_indicator_weighted,
            has(multiIf(
        and(a1.built_state = '10',  new_stock_one_name_index), arrayElement(new_stock_one_level_array, new_stock_one_name_index),
        and(a1.built_state = '11',  new_new_one_name_index), arrayElement(new_new_one_level_array, new_new_one_name_index), emptyArrayInt32()), a1.indicator_level) as is_indicator_one_vote
            from cmdi_pvopp.dwd_grade_level_for_annual_plan_indoor_info a1
        where a1.event_id global in (''
        <choose>
            <when test="params.raw.builtStateNewStock == null">

            </when>
            <when test="params.raw.builtStateNewStock.oneVoteThroughPool != null and params.raw.builtStateNewStock.oneVoteThroughPool.size() > 0">
                ,
                <foreach collection="params.raw.builtStateNewStock.oneVoteThroughPool" item="item" separator="," close="" open="">
                    #{item.indicatorGradeId}
                </foreach>
            </when>
            <otherwise>
            </otherwise>
        </choose>
        <choose>
            <when test="params.raw.builtStateNewStock == null">
            </when>
            <when test="params.raw.builtStateNewStock.weightPool != null and params.raw.builtStateNewStock.weightPool.size() > 0">
                ,
                <foreach collection="params.raw.builtStateNewStock.weightPool" item="item" separator="," close="" open="">
                    #{item.indicatorGradeId}
                </foreach>
            </when>
            <otherwise>
            </otherwise>
        </choose>
        <choose>
            <when test="params.raw.builtStateNewNew == null">
            </when>
            <when test="params.raw.builtStateNewNew.oneVoteThroughPool != null and params.raw.builtStateNewNew.oneVoteThroughPool.size() > 0">
                ,
                <foreach collection="params.raw.builtStateNewNew.oneVoteThroughPool" item="item" separator="," close="" open="">
                    #{item.indicatorGradeId}
                </foreach>
            </when>
            <otherwise>
            </otherwise>
        </choose>
        <choose>
            <when test="params.raw.builtStateNewNew == null">

            </when>
            <when test="params.raw.builtStateNewNew.weightPool != null and params.raw.builtStateNewNew.weightPool.size() > 0">
                ,
                <foreach collection="params.raw.builtStateNewNew.weightPool" item="item" separator="," close="" open="">
                    #{item.indicatorGradeId}
                </foreach>
            </when>
            <otherwise>
            </otherwise>
        </choose>
        )
                       )  b1
           group by b1.dwd_site_for_annual_plan_indoor_info_id
    </insert>
</mapper>